#!/usr/bin/env bash

# Phases:
# 1. Run unit tests
# 2. Build application and create artifacts
# 3. Deploy infrastructure and application code
# 4. Run integration tests
# 5. If all tests pass, deploy to production (currently imaginary). Else, deploy previous artifact

# Template from https://dbwebb.se/kunskap/create-bash-script-with-options-commands-and-arguments

# Exit values:
# 0 on success
# 1 on failure

# Name of script
SCRIPT=$( basename "$0" ) 

# Current script version
VERSION="0.0.1"


#
# Message to display if the tool is incorrectly used
#
function badusage {
    local message="$1"
    local txt=(
"For an overview of the command, execute:"
"$SCRIPT --help"
    )

    [[ $message ]] && printf "$message\n"

    printf "%s\n" "${txt[@]}"
}

#
# Message to display the version
#
function version {
    local txt=(
"$SCRIPT version $VERSION"
    )
    printf "%s\n" "${txt[@]}"
}

function proj-build {

  # Build api
  pushd backend
  pushd api
  ./run build
  popd
  popd
}

function proj-deploy {

  if [ -z "$ENVIRONMENT" ];
  then
    echo "Error, ENVIRONMENT variable was not set"
    exit 1
  fi

  # Deploy api
  pushd backend
  pushd api
  ./run deploy
  popd
  popd
}

function proj-test_unit {

  # api unit tests
  pushd ./backend
  pushd ./api
  ./run test_unit
  popd
  popd

}

function proj-test_integration {

  # api unit tests
  pushd backend
  pushd api
  ./run test_integration
  popd
  popd

}


#
# Process options
#
while(( $# ))
do


  case "$1" in

      --help | -h)
          usage
          exit 0
      ;;

      --version | -v)
          version
          exit 0
      ;;

      clean)
        command=$1
        shift
        proj-$command $*
        exit 0
      ;;

      build)
        command=$1
        shift
        proj-$command $*
        exit 0
      ;;

      test_unit)
        command=$1
        shift   # shifts positional arguments passed
        proj-$command $* # call the command and pass in the remaining commands, the commands will be indexed from $1 from the perspective of the command
        exit 0
      ;;

      test_integration)
        command=$1
        shift   # shifts positional arguments passed
        proj-$command $* # call the command and pass in the remaining commands, the commands will be indexed from $1 from the perspective of the command
        exit 0
      ;;

      deploy)
        command=$1
        shift   # shifts positional arguments passed
        proj-$command $* # call the command and pass in the remaining commands, the commands will be indexed from $1 from the perspective of the command
        exit 0
      ;;

      *)
        badusage "Option/Command not recognized"
        exit 1
      ;;
  # TODO: Add build, test and deploy, rollback? functions
  esac
done

badusage
exit 1
